# AOP : Aspected Oriented Programming
- 객체지향을 좀 더 객체지향적으로 만들어주는 

1. servlet-context.xml
	<!-- AOP -->
	<!-- AOP 기능을 수행하겠다 -->
	<aop:aspectj-autoproxy />
	
	- pom.xml
		<org.aspectj-version>1.7.0</org.aspectj-version>
	
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>


2. AopController.class 생성
- package :  com.n1books.dev.aop

package com.n1books.dev.aop;

import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.n1books.dev.controller.Text2SpeechController;

@Aspect
@Component
public class AopController {
	
	private static final Logger logger = LoggerFactory.getLogger(Text2SpeechController.class);
	
} //end class

# text2speech의 speaker를 눌렀을 떄 ad_before() 실행하고 싶다.

@Aspect
@Component
public class AopController {
	
	private static final Logger logger = LoggerFactory.getLogger(Text2SpeechController.class);
	
	@Before("execution(* com.n1books.dev.controller.Text2SpeechController.speaker(..) )")
	public void ad_before() {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("    before advice 수행중    ");
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
	}
	
} //end class